name: mcs_practice3
exam: false
buttons:
    "Checkpy": |
            from checkpy.interactive import testOffline
            testOffline("mcs_practice3", "/home/pyodide", multiprocessing=False, silentMode=False)
check:
    tool: checkpy
    repo: spcourse/exam-tests
    args: mcs_practice3
files:
    required:
        'mcs_practice3.py': |
            # Practice exam 3
            # Name: ...

            print("Welcome to the practice exam!")




        'mcs_practice3Test.py': |
            # ðŸš« Please Do Not Edit This File
            # Feel free to take a look, but you don't need to understand it.
            #
            # This file contains the checkpy tests for the exam.
            # Modifying it may cause checkpy to stop working correctly.


























            from checkpy import *
            import typing

            fun_def = (declarative
                .function("sumodd")
                .params("numbers")
                .returnType(float)
            )

            test1 = test()(fun_def
                .call([1,2,3,1,2,3,3,4])
                .returns(11)
            )



            fun_def = (declarative
                .function("reverse_list")
                .params("lst")
                .returnType(list)
            )

            test2 = test()(fun_def
                .call(["he", "l", "lo"])
                .returns(['lo', 'l', 'he'])
            )



            fun_def = (declarative
                .function("longest_repetition")
                .params("lst")
                .returnType(int)
            )

            test3 = test()(fun_def
                .call([1, 2, 2, 5, 5, 5, "a", "a"])
                .returns(3)
            )



            fun_def = (declarative
                .function("combine_dicts")
                .params("dict1", "dict2")
                .returnType(dict)
            )

            test4 = test()(fun_def
                .call({"a": 9, "b": 22, "c": 8}, {"x": 2, "b": 18, "y": 3})
                .returns({'a': 9, 'b': [22, 18], 'c': 8, 'x': 2, 'y': 3})
            )



            fun_def = (declarative
                .function("newtons_method_square_root_t")
                .params("n", "threshold")
                .returnType(float)
            )

            test5 = test()(fun_def
                .call(9, 0.01)
                .returns(approx(3.00009155413138, abs=0.001))
            )




            fun_def = (declarative
                .function("generate_1x1_grid")
                .params("step")
                .returnType(list[tuple,...])
            )


            @test()
            def test6():
                output = fun_def.call(0.5)().returned
                assert set(output) == {(0, 0), (0, 0.5), (0, 1.0), (0.5, 0),
                    (0.5, 0.5), (0.5, 1.0), (1.0, 0), (1.0, 0.5), (1.0, 1.0)}
